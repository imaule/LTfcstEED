# svm
Kernel <- "laplacedot"   # "rbfdot"	
scaling <- TRUE
Cexp <- c(-7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17)
ggexp <- c(5, 3, 1, -1, -3, -5, -7, -9, -11, -13, -15, -17)
t1 <- 102 ; tT <- 203 ; nobs <- (tT - t1 + 1) ; t0 <- t1 - 1 ; tTm1 <- tT - 1
y <- d_Wv.l_EPr[t1:tT]
reg.svm <- cbind( d_Wv.l_GDP[t1:tT], d_Wv.Tmpr[t1:tT] )
results.iter <- matrix( rep(0, times = 30*13*12*3 ), nrow=30*13*12, ncol=3 )
error.min <- crossprod(y) ; irow.error.min <- 0
for (ieps in 1:30) {
eps <- ieps * 0.01 - 0.001
for(iC in 1:13) {
C0 <- 2^Cexp[iC]  
for(igg in 1:12) {
set.seed(71)
sigma0 <- 2^ggexp[igg]
mod0 <- ksvm(reg.svm, y, scaled = scaling, C = C0, kpar = list(sigma=sigma0), 
			   cachesize = 2000, epsilon = eps, kernel = Kernel, cross = 5 )
irow <- igg + (iC-1)*12 + (ieps-1)*13*12
results.iter[irow,1] <- C0
results.iter[irow,2] <- sigma0
results.iter[irow,3] <- eps
if ( (cross(mod0) < error.min) ) {
error.min <- cross(mod0)
 irow.error.min <- irow}}}}
mod1 <- ksvm(reg.svm, y, scaled = scaling, C = results.iter[irow.error.min,1], 
kpar = list(sigma=results.iter[irow.error.min,2]), cachesize = 2000,
epsilon = results.iter[irow.error.min,3], kernel = Kernel, cross = 5, prob.model = "TRUE" )
uh <- y - predict(mod1, reg.svm )                
# fcst.
d_l_GDP[204:211] <- 0.015
for (i.l in 204:211) { l_GDP[i.l] <- d_l_GDP[i.l] + l_GDP[i.l-1]}	
d_Tmpr[204:211] <- 0.044	
for (i.l in 204:211) { Tmpr[i.l] <- d_Tmpr[i.l] + Tmpr[i.l-1]}	
wv_decomp <- modwt(l_GDP, wf = "la8", n.levels = 4, boundary = "reflection" )
wv_decomp$d1[1:422] <- 0 ; wv_decomp$d2[1:422] <- 0 ; wv_decomp$d3[1:422] <- 0
Wv.l_GDP <- imodwt(wv_decomp)
trendl_GDP <- trend( l_GDP, trend.order = 2, plot = FALSE ) 
t2.l_GDP <- trendl_GDP$trend		
for(i.c in 1:7) { Wv.l_GDP[204+i.c] <- (i.c*0.1) * t2.l_GDP[204+i.c] + (1-i.c*0.1) * Wv.l_GDP[204+i.c] } 		
wv_decomp <- modwt(Tmpr , wf = "la8", n.levels = 6, boundary = "reflection" )
wv_decomp$d1[1:422] <- 0 ; wv_decomp$d2[1:422] <- 0 ; wv_decomp$d3[1:422] <- 0
wv_decomp$d4[1:422] <- 0 ; wv_decomp$d5[1:422] <- 0
Wv.Tmpr  <- imodwt(wv_decomp)	
trendl_Tmpr <- trend( Tmpr, trend.order = 2, plot = FALSE ) 
t2.Tmpr <- trendl_Tmpr$trend		
for(i.c in 1:7) { Wv.Tmpr[204+i.c] <- (i.c*0.1) * t2.Tmpr[204+i.c] + (1-i.c*0.1) * Wv.Tmpr[204+i.c] } 
d_Wv.l_GDP <- rep(0, 211) ; d_Wv.l_GDP[2:211] <- Wv.l_GDP[2:211] - Wv.l_GDP[1:210]
d_Wv.Tmpr  <- rep(0, 211) ; d_Wv.Tmpr[2:211]  <- Wv.Tmpr[2:211] - Wv.Tmpr[1:210]	
# sim
N.bst <- 1000
Fcst.SVM.bst <- system.time(	
Fcst.SVM.bst.fe <- foreach(rn01=irunif(102, min=1, max=102, count=N.bst), .packages = "kernlab", .combine='c') %dopar% {
y.bst <- y.fit + uh[round(rn01)]
results.iter <- matrix( rep(0, times = 30*13*12*3 ), nrow=30*13*12, ncol=3 )
error.min <- crossprod(y.bst) ; irow.error.min <- 0
for (ieps in 1:30) {
eps <- ieps * 0.01 - 0.001
for(iC in 1:13) {
C0 <- 2^Cexp[iC]  
for(igg in 1:12) {
set.seed(71)
sigma0 <- 2^ggexp[igg]
mod0 <- ksvm(reg.svm, y.bst, scaled = scaling, C = C0, kpar = list(sigma=sigma0), 
cachesize = 2000, epsilon = eps, kernel = Kernel, cross = 5 )
irow <- igg + (iC-1)*12 + (ieps-1)*13*12
results.iter[irow,1] <- C0
results.iter[irow,2] <- sigma0
results.iter[irow,3] <- eps
if ( (cross(mod0) < error.min) ) {
error.min <- cross(mod0)
irow.error.min <- irow}}}}
mod1 <- ksvm(reg.svm, y.bst, scaled = scaling, C = results.iter[irow.error.min,1], 
kpar = list(sigma=results.iter[irow.error.min,2]), cachesize = 2000,
epsilon = results.iter[irow.error.min,3], kernel = Kernel,cross = 5, prob.model = "TRUE" )	
d_Wv.l_EPr[204:211] <- predict(mod1, cbind( d_Wv.l_GDP[204:211], d_Wv.Tmpr[204:211]) )
Wv.l_EPr[211] <- sum(d_Wv.l_EPr[204:211]) + Wv.l_EPr[203]		
T.gr.SVM <- (exp(Wv.l_EPr[211]-Wv.l_EPr[203]) - 1) * 100})
mean(Fcst.SVM.bst.fe)
median(Fcst.SVM.bst.fe)
range(Fcst.SVM.bst.fe)
quantile(Fcst.SVM.bst.fe, probs=c(0.025,0.975))
	
		
		
